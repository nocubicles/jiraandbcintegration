// <auto-generated />
//
// To parse this JSON data, add NuGet 'System.Text.Json' then do:
//
//    using bcandjira;
//
//    var jiraTask = JiraTask.FromJson(jsonString);
#nullable enable
#pragma warning disable CS8618
#pragma warning disable CS8601
#pragma warning disable CS8603

namespace JiraIssue
{
    using System;
    using System.Collections.Generic;

    using System.Text.Json;
    using System.Text.Json.Serialization;
    using System.Globalization;

    public partial class JiraTask
    {
        [JsonPropertyName("timestamp")]
        public long? Timestamp { get; set; }

        [JsonPropertyName("webhookEvent")]
        public string WebhookEvent { get; set; }

        [JsonPropertyName("issue_event_type_name")]
        public string IssueEventTypeName { get; set; }

        [JsonPropertyName("user")]
        public User User { get; set; }

        [JsonPropertyName("issue")]
        public Issue Issue { get; set; }

        [JsonPropertyName("changelog")]
        public Changelog Changelog { get; set; }
    }

    public partial class Changelog
    {
        [JsonPropertyName("id")]
        [JsonConverter(typeof(ParseStringConverter))]
        public long Id { get; set; }

        [JsonPropertyName("items")]
        public List<Item> Items { get; set; }
    }

    public partial class Item
    {
        [JsonPropertyName("field")]
        public string Field { get; set; }

        [JsonPropertyName("fieldtype")]
        public string Fieldtype { get; set; }

        [JsonPropertyName("fieldId")]
        public string FieldId { get; set; }

        [JsonPropertyName("from")]
        public object From { get; set; }

        [JsonPropertyName("fromString")]
        public string FromString { get; set; }

        [JsonPropertyName("to")]
        public object To { get; set; }

        [JsonPropertyName("toString")]
        public string ItemToString { get; set; }
    }

    public partial class Issue
    {
        [JsonPropertyName("id")]
        [JsonConverter(typeof(ParseStringConverter))]
        public long Id { get; set; }

        [JsonPropertyName("self")]
        public Uri Self { get; set; }

        [JsonPropertyName("key")]
        public string Key { get; set; }

        [JsonPropertyName("fields")]
        public Fields Fields { get; set; }
    }

    public partial class Fields
    {
        [JsonPropertyName("statuscategorychangedate")]
        public string Statuscategorychangedate { get; set; }

        [JsonPropertyName("issuetype")]
        public Issuetype Issuetype { get; set; }

        [JsonPropertyName("timespent")]
        public long? Timespent { get; set; }

        [JsonPropertyName("customfield_10030")]
        public object Customfield10030 { get; set; }

        [JsonPropertyName("project")]
        public Project Project { get; set; }

        [JsonPropertyName("customfield_10031")]
        public object Customfield10031 { get; set; }

        [JsonPropertyName("customfield_10032")]
        public object Customfield10032 { get; set; }

        [JsonPropertyName("fixVersions")]
        public List<object> FixVersions { get; set; }

        [JsonPropertyName("aggregatetimespent")]
        public long? Aggregatetimespent { get; set; }

        [JsonPropertyName("resolution")]
        public object Resolution { get; set; }

        [JsonPropertyName("customfield_10027")]
        public object Customfield10027 { get; set; }

        [JsonPropertyName("customfield_10028")]
        public object Customfield10028 { get; set; }

        [JsonPropertyName("customfield_10029")]
        public object Customfield10029 { get; set; }

        [JsonPropertyName("resolutiondate")]
        public object Resolutiondate { get; set; }

        [JsonPropertyName("workratio")]
        public long? Workratio { get; set; }

        [JsonPropertyName("watches")]
        public Watches Watches { get; set; }

        [JsonPropertyName("issuerestriction")]
        public Issuerestriction Issuerestriction { get; set; }

        [JsonPropertyName("lastViewed")]
        public string LastViewed { get; set; }

        [JsonPropertyName("created")]
        public string Created { get; set; }

        [JsonPropertyName("customfield_10020")]
        public object Customfield10020 { get; set; }

        [JsonPropertyName("customfield_10021")]
        public object Customfield10021 { get; set; }

        [JsonPropertyName("customfield_10022")]
        public object Customfield10022 { get; set; }

        [JsonPropertyName("customfield_10023")]
        public object Customfield10023 { get; set; }

        [JsonPropertyName("priority")]
        public Priority Priority { get; set; }

        [JsonPropertyName("customfield_10024")]
        public object Customfield10024 { get; set; }

        [JsonPropertyName("customfield_10025")]
        public object Customfield10025 { get; set; }

        [JsonPropertyName("labels")]
        public List<object> Labels { get; set; }

        [JsonPropertyName("customfield_10026")]
        public object Customfield10026 { get; set; }

        [JsonPropertyName("customfield_10016")]
        public object Customfield10016 { get; set; }

        [JsonPropertyName("customfield_10017")]
        public object Customfield10017 { get; set; }

        [JsonPropertyName("customfield_10018")]
        public Customfield10018 Customfield10018 { get; set; }

        [JsonPropertyName("customfield_10019")]
        public string Customfield10019 { get; set; }

        [JsonPropertyName("aggregatetimeoriginalestimate")]
        public object Aggregatetimeoriginalestimate { get; set; }

        [JsonPropertyName("timeestimate")]
        public long? Timeestimate { get; set; }

        [JsonPropertyName("versions")]
        public List<object> Versions { get; set; }

        [JsonPropertyName("issuelinks")]
        public List<object> Issuelinks { get; set; }

        [JsonPropertyName("assignee")]
        public object Assignee { get; set; }

        [JsonPropertyName("updated")]
        public string Updated { get; set; }

        [JsonPropertyName("status")]
        public Status Status { get; set; }

        [JsonPropertyName("components")]
        public List<object> Components { get; set; }

        [JsonPropertyName("timeoriginalestimate")]
        public object Timeoriginalestimate { get; set; }

        [JsonPropertyName("description")]
        public object Description { get; set; }

        [JsonPropertyName("customfield_10010")]
        public object Customfield10010 { get; set; }

        [JsonPropertyName("customfield_10014")]
        public object Customfield10014 { get; set; }

        [JsonPropertyName("timetracking")]
        public Timetracking Timetracking { get; set; }

        [JsonPropertyName("customfield_10015")]
        public object Customfield10015 { get; set; }

        [JsonPropertyName("customfield_10005")]
        public object Customfield10005 { get; set; }

        [JsonPropertyName("customfield_10006")]
        public object Customfield10006 { get; set; }

        [JsonPropertyName("security")]
        public object Security { get; set; }

        [JsonPropertyName("customfield_10007")]
        public object Customfield10007 { get; set; }

        [JsonPropertyName("customfield_10008")]
        public object Customfield10008 { get; set; }

        [JsonPropertyName("customfield_10009")]
        public object Customfield10009 { get; set; }

        [JsonPropertyName("aggregatetimeestimate")]
        public long? Aggregatetimeestimate { get; set; }

        [JsonPropertyName("attachment")]
        public List<object> Attachment { get; set; }

        [JsonPropertyName("summary")]
        public string Summary { get; set; }

        [JsonPropertyName("creator")]
        public User Creator { get; set; }

        [JsonPropertyName("subtasks")]
        public List<object> Subtasks { get; set; }

        [JsonPropertyName("reporter")]
        public User Reporter { get; set; }

        [JsonPropertyName("aggregateprogress")]
        public Progress Aggregateprogress { get; set; }

        [JsonPropertyName("customfield_10001")]
        public object Customfield10001 { get; set; }

        [JsonPropertyName("customfield_10002")]
        public object Customfield10002 { get; set; }

        [JsonPropertyName("customfield_10003")]
        public object Customfield10003 { get; set; }

        [JsonPropertyName("customfield_10004")]
        public object Customfield10004 { get; set; }

        [JsonPropertyName("environment")]
        public object Environment { get; set; }

        [JsonPropertyName("duedate")]
        public object Duedate { get; set; }

        [JsonPropertyName("progress")]
        public Progress Progress { get; set; }

        [JsonPropertyName("votes")]
        public Votes Votes { get; set; }
    }

    public partial class Progress
    {
        [JsonPropertyName("progress")]
        public long? ProgressProgress { get; set; }

        [JsonPropertyName("total")]
        public long? Total { get; set; }

        [JsonPropertyName("percent")]
        public long? Percent { get; set; }
    }

    public partial class User
    {
        [JsonPropertyName("self")]
        public Uri Self { get; set; }

        [JsonPropertyName("accountId")]
        public string AccountId { get; set; }

        [JsonPropertyName("avatarUrls")]
        public AvatarUrls AvatarUrls { get; set; }

        [JsonPropertyName("displayName")]
        public string DisplayName { get; set; }

        [JsonPropertyName("active")]
        public bool Active { get; set; }

        [JsonPropertyName("timeZone")]
        public string TimeZone { get; set; }

        [JsonPropertyName("accountType")]
        public string AccountType { get; set; }
    }

    public partial class AvatarUrls
    {
        [JsonPropertyName("48x48")]
        public Uri The48X48 { get; set; }

        [JsonPropertyName("24x24")]
        public Uri The24X24 { get; set; }

        [JsonPropertyName("16x16")]
        public Uri The16X16 { get; set; }

        [JsonPropertyName("32x32")]
        public Uri The32X32 { get; set; }
    }

    public partial class Customfield10018
    {
        [JsonPropertyName("hasEpicLinkFieldDependency")]
        public bool HasEpicLinkFieldDependency { get; set; }

        [JsonPropertyName("showField")]
        public bool ShowField { get; set; }

        [JsonPropertyName("nonEditableReason")]
        public NonEditableReason NonEditableReason { get; set; }
    }

    public partial class NonEditableReason
    {
        [JsonPropertyName("reason")]
        public string Reason { get; set; }

        [JsonPropertyName("message")]
        public string Message { get; set; }
    }

    public partial class Issuerestriction
    {
        [JsonPropertyName("issuerestrictions")]
        public Issuerestrictions Issuerestrictions { get; set; }

        [JsonPropertyName("shouldDisplay")]
        public bool ShouldDisplay { get; set; }
    }

    public partial class Issuerestrictions
    {
    }

    public partial class Issuetype
    {
        [JsonPropertyName("self")]
        public Uri Self { get; set; }

        [JsonPropertyName("id")]
        [JsonConverter(typeof(ParseStringConverter))]
        public long Id { get; set; }

        [JsonPropertyName("description")]
        public string Description { get; set; }

        [JsonPropertyName("iconUrl")]
        public Uri IconUrl { get; set; }

        [JsonPropertyName("name")]
        public string Name { get; set; }

        [JsonPropertyName("subtask")]
        public bool Subtask { get; set; }

        [JsonPropertyName("avatarId")]
        public long? AvatarId { get; set; }

        [JsonPropertyName("entityId")]
        public Guid EntityId { get; set; }

        [JsonPropertyName("hierarchyLevel")]
        public long? HierarchyLevel { get; set; }
    }

    public partial class Priority
    {
        [JsonPropertyName("self")]
        public Uri Self { get; set; }

        [JsonPropertyName("iconUrl")]
        public Uri IconUrl { get; set; }

        [JsonPropertyName("name")]
        public string Name { get; set; }

        [JsonPropertyName("id")]
        [JsonConverter(typeof(ParseStringConverter))]
        public long Id { get; set; }
    }

    public partial class Project
    {
        [JsonPropertyName("self")]
        public Uri Self { get; set; }

        [JsonPropertyName("id")]
        [JsonConverter(typeof(ParseStringConverter))]
        public long Id { get; set; }

        [JsonPropertyName("key")]
        public string Key { get; set; }

        [JsonPropertyName("name")]
        public string Name { get; set; }

        [JsonPropertyName("projectTypeKey")]
        public string ProjectTypeKey { get; set; }

        [JsonPropertyName("simplified")]
        public bool Simplified { get; set; }

        [JsonPropertyName("avatarUrls")]
        public AvatarUrls AvatarUrls { get; set; }
    }

    public partial class Status
    {
        [JsonPropertyName("self")]
        public Uri Self { get; set; }

        [JsonPropertyName("description")]
        public string Description { get; set; }

        [JsonPropertyName("iconUrl")]
        public Uri IconUrl { get; set; }

        [JsonPropertyName("name")]
        public string Name { get; set; }

        [JsonPropertyName("id")]
        [JsonConverter(typeof(ParseStringConverter))]
        public long Id { get; set; }

        [JsonPropertyName("statusCategory")]
        public StatusCategory StatusCategory { get; set; }
    }

    public partial class StatusCategory
    {
        [JsonPropertyName("self")]
        public Uri Self { get; set; }

        [JsonPropertyName("id")]
        public long? Id { get; set; }

        [JsonPropertyName("key")]
        public string Key { get; set; }

        [JsonPropertyName("colorName")]
        public string ColorName { get; set; }

        [JsonPropertyName("name")]
        public string Name { get; set; }
    }

    public partial class Timetracking
    {
        [JsonPropertyName("remainingEstimate")]
        public string RemainingEstimate { get; set; }

        [JsonPropertyName("timeSpent")]
        public string TimeSpent { get; set; }

        [JsonPropertyName("remainingEstimateSeconds")]
        public long? RemainingEstimateSeconds { get; set; }

        [JsonPropertyName("timeSpentSeconds")]
        public long? TimeSpentSeconds { get; set; }
    }

    public partial class Votes
    {
        [JsonPropertyName("self")]
        public Uri Self { get; set; }

        [JsonPropertyName("votes")]
        public long? VotesVotes { get; set; }

        [JsonPropertyName("hasVoted")]
        public bool HasVoted { get; set; }
    }

    public partial class Watches
    {
        [JsonPropertyName("self")]
        public Uri Self { get; set; }

        [JsonPropertyName("watchCount")]
        public long? WatchCount { get; set; }

        [JsonPropertyName("isWatching")]
        public bool IsWatching { get; set; }
    }

    public partial class JiraTask
    {
        public static JiraTask FromJson(string json) => JsonSerializer.Deserialize<JiraTask>(json, JiraIssue.Converter.Settings);
    }

    public static class Serialize
    {
        public static string ToJson(this JiraTask self) => JsonSerializer.Serialize(self, JiraIssue.Converter.Settings);
    }

    internal static class Converter
    {
        public static readonly JsonSerializerOptions Settings = new(JsonSerializerDefaults.General)
        {
            Converters =
            {
                new DateOnlyConverter(),
                new TimeOnlyConverter(),
                IsoDateTimeOffsetConverter.Singleton
            },
        };
    }

    internal class ParseStringConverter : JsonConverter<long>
    {
        public override bool CanConvert(Type t) => t == typeof(long);

        public override long Read(ref Utf8JsonReader reader, Type typeToConvert, JsonSerializerOptions options)
        {
            var value = reader.GetString();
            long l;
            if (Int64.TryParse(value, out l))
            {
                return l;
            }
            throw new Exception("Cannot unmarshal type long");
        }

        public override void Write(Utf8JsonWriter writer, long value, JsonSerializerOptions options)
        {
            JsonSerializer.Serialize(writer, value.ToString(), options);
            return;
        }

        public static readonly ParseStringConverter Singleton = new ParseStringConverter();
    }

    public class DateOnlyConverter : JsonConverter<DateOnly>
    {
        private readonly string serializationFormat;
        public DateOnlyConverter() : this(null) { }

        public DateOnlyConverter(string? serializationFormat)
        {
            this.serializationFormat = serializationFormat ?? "yyyy-MM-dd";
        }

        public override DateOnly Read(ref Utf8JsonReader reader, Type typeToConvert, JsonSerializerOptions options)
        {
            var value = reader.GetString();
            return DateOnly.Parse(value!);
        }

        public override void Write(Utf8JsonWriter writer, DateOnly value, JsonSerializerOptions options)
            => writer.WriteStringValue(value.ToString(serializationFormat));
    }

    public class TimeOnlyConverter : JsonConverter<TimeOnly>
    {
        private readonly string serializationFormat;

        public TimeOnlyConverter() : this(null) { }

        public TimeOnlyConverter(string? serializationFormat)
        {
            this.serializationFormat = serializationFormat ?? "HH:mm:ss.fff";
        }

        public override TimeOnly Read(ref Utf8JsonReader reader, Type typeToConvert, JsonSerializerOptions options)
        {
            var value = reader.GetString();
            return TimeOnly.Parse(value!);
        }

        public override void Write(Utf8JsonWriter writer, TimeOnly value, JsonSerializerOptions options)
            => writer.WriteStringValue(value.ToString(serializationFormat));
    }

    internal class IsoDateTimeOffsetConverter : JsonConverter<DateTimeOffset>
    {
        public override bool CanConvert(Type t) => t == typeof(DateTimeOffset);

        private const string DefaultDateTimeFormat = "yyyy'-'MM'-'dd'T'HH':'mm':'ss.FFFFFFFK";

        private DateTimeStyles _dateTimeStyles = DateTimeStyles.RoundtripKind;
        private string? _dateTimeFormat;
        private CultureInfo? _culture;

        public DateTimeStyles DateTimeStyles
        {
            get => _dateTimeStyles;
            set => _dateTimeStyles = value;
        }

        public string? DateTimeFormat
        {
            get => _dateTimeFormat ?? string.Empty;
            set => _dateTimeFormat = (string.IsNullOrEmpty(value)) ? null : value;
        }

        public CultureInfo Culture
        {
            get => _culture ?? CultureInfo.CurrentCulture;
            set => _culture = value;
        }

        public override void Write(Utf8JsonWriter writer, DateTimeOffset value, JsonSerializerOptions options)
        {
            string text;


            if ((_dateTimeStyles & DateTimeStyles.AdjustToUniversal) == DateTimeStyles.AdjustToUniversal
                || (_dateTimeStyles & DateTimeStyles.AssumeUniversal) == DateTimeStyles.AssumeUniversal)
            {
                value = value.ToUniversalTime();
            }

            text = value.ToString(_dateTimeFormat ?? DefaultDateTimeFormat, Culture);

            writer.WriteStringValue(text);
        }

        public override DateTimeOffset Read(ref Utf8JsonReader reader, Type typeToConvert, JsonSerializerOptions options)
        {
            string? dateText = reader.GetString();

            if (string.IsNullOrEmpty(dateText) == false)
            {
                if (!string.IsNullOrEmpty(_dateTimeFormat))
                {
                    return DateTimeOffset.ParseExact(dateText, _dateTimeFormat, Culture, _dateTimeStyles);
                }
                else
                {
                    return DateTimeOffset.Parse(dateText, Culture, _dateTimeStyles);
                }
            }
            else
            {
                return default(DateTimeOffset);
            }
        }


        public static readonly IsoDateTimeOffsetConverter Singleton = new IsoDateTimeOffsetConverter();
    }
}
#pragma warning restore CS8618
#pragma warning restore CS8601
#pragma warning restore CS8603
